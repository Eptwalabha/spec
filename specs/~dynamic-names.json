{
  "overview": "Dynamic Names are a special notation to dynamically determine a tag's content.\n\nDynamic Names MUST be a non-whitespace character sequence NOT containing\nthe current closing delimiter. A Dynamic Name consists of an asterisk,\nfollowed by a dotted name. The latter follows the same notation as in an\nInterpolation tag.\n\nThis tag's content refers to a key in the context whose value will be used in\nplace of the Dynamic Name itself as content of the tag. The name resolution is\nidentical to name resolution in Interpolation tags, as follows:\n  1) Split the name on periods; the first part is the name to resolve, any\n  remaining parts should be retained.\n  2) Walk the context stack from top to bottom, finding the first context\n  that is a) a hash containing the name as a key OR b) an object responding\n  to a method with the given name.\n  3) If the context is a hash, the data is the value associated with the\n  name.\n  4) If the context is an object, the data is the value returned by the\n  method with the given name.\n  5) If any name parts were retained in step 1, each should be resolved\n  against a context stack containing only the result from the former\n  resolution.  If any part fails resolution, the result should be considered\n  falsey, and should interpolate as the empty string.\nThe resolved data should be coerced into a string before being used as\ncontent.\n\nSet Delimiter tags MUST NOT affect the resolution of a Dynamic Name. The\nDynamic Names MUST be resolved against the context stack local to the tag.\nFailed resolution of the dynamic name should result in nothing being rendered.\n\nEngines that implement Dynamic Names MUST support their use in Partial tags.\nIn engines that also implement the optional inheritance spec, Dynamic Names\ninside Parent tags should be supported as well. Dynamic Names cannot be\nresolved more than once (Dynamic Names cannot be nested).\n",
  "tests": [
    {
      "name": "Basic Behavior - Partial",
      "desc": "The asterisk operator is used for dynamic partials.",
      "data": {
        "dynamic": "content"
      },
      "template": "\"{{>*dynamic}}\"",
      "partials": {
        "content": "Hello, world!"
      },
      "expected": "\"Hello, world!\""
    },
    {
      "name": "Context Misses - Partial",
      "desc": "Failed context lookups should be considered falsey.",
      "data": {},
      "template": "\"{{>*missing}}\"",
      "partials": {
        "missing": "Hello, world!"
      },
      "expected": "\"\""
    },
    {
      "name": "Failed Lookup - Partial",
      "desc": "The empty string should be used when the named partial is not found.",
      "data": {
        "dynamic": "content"
      },
      "template": "\"{{>*dynamic}}\"",
      "partials": {
        "foobar": "Hello, world!"
      },
      "expected": "\"\""
    },
    {
      "name": "Context",
      "desc": "The dynamic partial should operate within the current context.",
      "data": {
        "text": "Hello, world!",
        "example": "partial"
      },
      "template": "\"{{>*example}}\"",
      "partials": {
        "partial": "*{{text}}*"
      },
      "expected": "\"*Hello, world!*\""
    },
    {
      "name": "Dotted Names",
      "desc": "The dynamic partial should operate within the current context.",
      "data": {
        "text": "Hello, world!",
        "foo": {
          "bar": {
            "baz": "partial"
          }
        }
      },
      "template": "\"{{>*foo.bar.baz}}\"",
      "partials": {
        "partial": "*{{text}}*"
      },
      "expected": "\"*Hello, world!*\""
    },
    {
      "name": "Dotted Names - Failed Lookup",
      "desc": "The dynamic partial should operate within the current context.",
      "data": {
        "text": "Hello, world!",
        "foo": "test",
        "test": {
          "bar": {
            "baz": "partial"
          }
        }
      },
      "template": "\"{{>*foo.bar.baz}}\"",
      "partials": {
        "partial": "*{{text}}*"
      },
      "expected": "\"\""
    },
    {
      "name": "Dotted Names - Failed Lookup",
      "desc": "The dynamic partial should operate within the current context.",
      "data": {
        "foo": {
          "text": "Hello, world!",
          "bar": {
            "baz": "partial"
          }
        }
      },
      "template": "\"{{>*foo.bar.baz}}\"",
      "partials": {
        "partial": "*{{text}}*"
      },
      "expected": "\"**\""
    },
    {
      "name": "Dotted names - Context Stacking",
      "desc": "Dotted names should not push a new frame on the context stack.",
      "data": {
        "section1": {
          "value": "section1"
        },
        "section2": {
          "dynamic": "partial",
          "value": "section2"
        }
      },
      "template": "{{#section1}}{{>*section2.dynamic}}{{/section1}}",
      "partials": {
        "partial": "\"{{value}}\""
      },
      "expected": "\"section1\""
    },
    {
      "name": "Dotted names - Context Stacking Under Repetition",
      "desc": "Dotted names should not push a new frame on the context stack.",
      "data": {
        "value": "test",
        "section1": [
          1,
          2
        ],
        "section2": {
          "dynamic": "partial",
          "value": "section2"
        }
      },
      "template": "{{#section1}}{{>*section2.dynamic}}{{/section1}}",
      "partials": {
        "partial": "{{value}}"
      },
      "expected": "testtest"
    },
    {
      "name": "Dotted names - Context Stacking Failed Lookup",
      "desc": "Dotted names should resolve against the proper context stack.",
      "data": {
        "section1": [
          1,
          2
        ],
        "section2": {
          "dynamic": "partial",
          "value": "section2"
        }
      },
      "template": "{{#section1}}{{>*section2.dynamic}}{{/section1}}",
      "partials": {
        "partial": "\"{{value}}\""
      },
      "expected": "\"\"\"\""
    },
    {
      "name": "Recursion",
      "desc": "Dynamic partials should properly recurse.",
      "data": {
        "template": "node",
        "content": "X",
        "nodes": [
          {
            "content": "Y",
            "nodes": []
          }
        ]
      },
      "template": "{{>*template}}",
      "partials": {
        "node": "{{content}}<{{#nodes}}{{>*template}}{{/nodes}}>"
      },
      "expected": "X<Y<>>"
    },
    {
      "name": "Surrounding Whitespace",
      "desc": "A dynamic partials should not alter surrounding whitespace; any\nwhitespace preceding the tag should treated as indentation while any\nwhitepsace succeding the tag should be left untouched.\n",
      "data": {
        "partial": "foobar"
      },
      "template": "| {{>*partial}} |",
      "partials": {
        "foobar": "\t|\t"
      },
      "expected": "| \t|\t |"
    },
    {
      "name": "Inline Indentation",
      "desc": "Whitespace should be left untouched: whitespaces preceding the tag\nshould be treated as indentation.\n",
      "data": {
        "dynamic": "partial",
        "data": "|"
      },
      "template": "  {{data}}  {{>* dynamic}}\n",
      "partials": {
        "partial": ">\n>"
      },
      "expected": "  |  >\n>\n"
    },
    {
      "name": "Standalone Line Endings",
      "desc": "\"\\r\\n\" should be considered a newline for standalone tags.",
      "data": {
        "dynamic": "partial"
      },
      "template": "|\r\n{{>*dynamic}}\r\n|",
      "partials": {
        "partial": ">"
      },
      "expected": "|\r\n>|"
    },
    {
      "name": "Standalone Without Previous Line",
      "desc": "Standalone tags should not require a newline to precede them.",
      "data": {
        "dynamic": "partial"
      },
      "template": "  {{>*dynamic}}\n>",
      "partials": {
        "partial": ">\n>"
      },
      "expected": "  >\n  >>"
    },
    {
      "name": "Standalone Without Newline",
      "desc": "Standalone tags should not require a newline to follow them.",
      "data": {
        "dynamic": "partial"
      },
      "template": ">\n  {{>*dynamic}}",
      "partials": {
        "partial": ">\n>"
      },
      "expected": ">\n  >\n  >"
    },
    {
      "name": "Standalone Indentation",
      "desc": "Each line of the partial should be indented before rendering.",
      "data": {
        "dynamic": "partial",
        "content": "<\n->"
      },
      "template": "\\\n {{>*dynamic}}\n/\n",
      "partials": {
        "partial": "|\n{{{content}}}\n|\n"
      },
      "expected": "\\\n |\n <\n->\n |\n/\n"
    },
    {
      "name": "Padding Whitespace",
      "desc": "Superfluous in-tag whitespace should be ignored.",
      "data": {
        "dynamic": "partial",
        "boolean": true
      },
      "template": "|{{> *dynamic }}|",
      "partials": {
        "partial": "[]"
      },
      "expected": "|[]|"
    }
  ]
}
