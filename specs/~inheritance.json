{
  "__ATTN__": "Do not edit this file; changes belong in the appropriate YAML file.",
  "overview": "Like partials, Parent tags are used to expand an external template into the\ncurrent template. Contrary to partials, Parent tags may contain optional\narguments delimited by block tags. For this reason, Parent tags may also be\nreferred to as Parametric Partials.\n\nThe Parent tags' content MUST be a non-whitespace character sequence NOT\ncontaining the current closing delimiter; each Parent tag MUST be followed by\nan End Section tag with the same content within the matching Parent tag.\n\nThis tag's content names the Parent template to inject. Set Delimiter tags\nMUST NOT affect the parsing of a Parent template. The Parent MUST be rendered\nagainst the context stack local to the tag. If the named Parent cannot be\nfound, the empty string SHOULD be used instead, as in interpolations.\n\nParent tags SHOULD be treated as standalone when appropriate. If this tag is\nused standalone, any whitespace preceding the tag should be treated as\nindentation, and prepended to each line of the Parent before rendering.\n\nThe Block tags' content MUST be a non-whitespace character sequence NOT\ncontaining the current closing delimiter. Each Block tag MUST be followed by\nan End Section tag with the same content within the matching Block tag. This\ntag's content determines the parameter or argument name.\n\nBlock tags may appear both inside and outside of Parent tags. In both cases,\nthey specify a position within the template that can be overridden; it is a\nparameter of the containing template. The template text between the Block tag\nand its matching End Section tag defines the default content to render when\nthe parameter is not overridden from outside.\n\nIn addition, when used inside of a Parent tag, the template text between a\nBlock tag and its matching End Section tag defines content that replaces the\ndefault defined in the Parent template. This content is the argument passed\nto the Parent template.\n\nThe practice of injecting an external template using a Parent tag is referred\nto as inheritance. If the Parent tag includes a Block tag that overrides a\nparameter of the Parent template, this may also be referred to as\nsubstitution.\n",
  "tests": [
    {
      "name": "Default",
      "desc": "Default content should be rendered if the block isn't overridden",
      "data": {
      },
      "template": "{{$title}}Default title{{/title}}\n",
      "expected": "Default title\n"
    },
    {
      "name": "Variable",
      "desc": "Default content renders variables",
      "data": {
        "bar": "baz"
      },
      "template": "{{$foo}}default {{bar}} content{{/foo}}\n",
      "expected": "default baz content\n"
    },
    {
      "name": "Triple Mustache",
      "desc": "Default content renders triple mustache variables",
      "data": {
        "bar": "<baz>"
      },
      "template": "{{$foo}}default {{{bar}}} content{{/foo}}\n",
      "expected": "default <baz> content\n"
    },
    {
      "name": "Sections",
      "desc": "Default content renders sections",
      "data": {
        "bar": {
          "baz": "qux"
        }
      },
      "template": "{{$foo}}default {{#bar}}{{baz}}{{/bar}} content{{/foo}}\n",
      "expected": "default qux content\n"
    },
    {
      "name": "Negative Sections",
      "desc": "Default content renders negative sections",
      "data": {
        "baz": "three"
      },
      "template": "{{$foo}}default {{^bar}}{{baz}}{{/bar}} content{{/foo}}\n",
      "expected": "default three content\n"
    },
    {
      "name": "Mustache Injection",
      "desc": "Mustache injection in default content",
      "data": {
        "bar": {
          "baz": "{{qux}}"
        }
      },
      "template": "{{$foo}}default {{#bar}}{{baz}}{{/bar}} content{{/foo}}\n",
      "expected": "default {{qux}} content\n"
    },
    {
      "name": "Inherit",
      "desc": "Default content rendered inside included templates",
      "data": {
      },
      "template": "{{<include}}{{/include}}\n",
      "partials": {
        "include": "{{$foo}}default content{{/foo}}"
      },
      "expected": "default content"
    },
    {
      "name": "Overridden content",
      "desc": "Overridden content",
      "data": {
      },
      "template": "{{<super}}{{$title}}sub template title{{/title}}{{/super}}",
      "partials": {
        "super": "...{{$title}}Default title{{/title}}..."
      },
      "expected": "...sub template title..."
    },
    {
      "name": "Data does not override block",
      "desc": "Provided data does not override data passed into parent",
      "data": {
        "var": "var in data"
      },
      "template": "{{<include}}{{$var}}var in template{{/var}}{{/include}}",
      "partials": {
        "include": "{{$var}}var in include{{/var}}"
      },
      "expected": "var in template"
    },
    {
      "name": "Data does not override block default",
      "desc": "Provided data does not override default value of block",
      "data": {
        "var": "var in data"
      },
      "template": "{{<include}}{{/include}}",
      "partials": {
        "include": "{{$var}}var in include{{/var}}"
      },
      "expected": "var in include"
    },
    {
      "name": "Overridden partial",
      "desc": "Overridden partial",
      "data": {
      },
      "template": "test {{<partial}}{{$stuff}}override{{/stuff}}{{/partial}}",
      "partials": {
        "partial": "{{$stuff}}...{{/stuff}}"
      },
      "expected": "test override"
    },
    {
      "name": "Two overridden partials",
      "desc": "Two overridden partials with different content",
      "data": {
      },
      "template": "test {{<partial}}{{$stuff}}override1{{/stuff}}{{/partial}} {{<partial}}{{$stuff}}override2{{/stuff}}{{/partial}}\n",
      "partials": {
        "partial": "|{{$stuff}}...{{/stuff}}{{$default}} default{{/default}}|"
      },
      "expected": "test |override1 default| |override2 default|\n"
    },
    {
      "name": "Override partial with newlines",
      "desc": "Override partial with newlines",
      "data": {
      },
      "template": "{{<partial}}{{$ballmer}}\npeaked\n\n:(\n{{/ballmer}}{{/partial}}",
      "partials": {
        "partial": "{{$ballmer}}peaking{{/ballmer}}"
      },
      "expected": "peaked\n\n:(\n"
    },
    {
      "name": "Inherit indentation",
      "desc": "Inherit indentation when overriding a partial",
      "data": {
      },
      "template": "{{<partial}}{{$nineties}}hammer time{{/nineties}}{{/partial}}",
      "partials": {
        "partial": "stop:\n  {{$nineties}}collaborate and listen{{/nineties}}\n"
      },
      "expected": "stop:\n  hammer time\n"
    },
    {
      "name": "Only one override",
      "desc": "Override one substitution but not the other",
      "data": {
      },
      "template": "{{<partial}}{{$stuff2}}override two{{/stuff2}}{{/partial}}",
      "partials": {
        "partial": "{{$stuff}}new default one{{/stuff}}, {{$stuff2}}new default two{{/stuff2}}"
      },
      "expected": "new default one, override two"
    },
    {
      "name": "Super template",
      "desc": "Super templates behave identically to partials when called with no parameters",
      "data": {
      },
      "template": "{{>include}}|{{<include}}{{/include}}",
      "partials": {
        "include": "{{$foo}}default content{{/foo}}"
      },
      "expected": "default content|default content"
    },
    {
      "name": "Recursion",
      "desc": "Recursion in inherited templates",
      "data": {
      },
      "template": "{{<include}}{{$foo}}override{{/foo}}{{/include}}",
      "partials": {
        "include": "{{$foo}}default content{{/foo}} {{$bar}}{{<include2}}{{/include2}}{{/bar}}",
        "include2": "{{$foo}}include2 default content{{/foo}} {{<include}}{{$bar}}don't recurse{{/bar}}{{/include}}"
      },
      "expected": "override override override don't recurse"
    },
    {
      "name": "Multi-level inheritance",
      "desc": "Top-level substitutions take precedence in multi-level inheritance",
      "data": {
      },
      "template": "{{<parent}}{{$a}}c{{/a}}{{/parent}}",
      "partials": {
        "parent": "{{<older}}{{$a}}p{{/a}}{{/older}}",
        "older": "{{<grandParent}}{{$a}}o{{/a}}{{/grandParent}}",
        "grandParent": "{{$a}}g{{/a}}"
      },
      "expected": "c"
    },
    {
      "name": "Multi-level inheritance, no sub child",
      "desc": "Top-level substitutions take precedence in multi-level inheritance",
      "data": {
      },
      "template": "{{<parent}}{{/parent}}",
      "partials": {
        "parent": "{{<older}}{{$a}}p{{/a}}{{/older}}",
        "older": "{{<grandParent}}{{$a}}o{{/a}}{{/grandParent}}",
        "grandParent": "{{$a}}g{{/a}}"
      },
      "expected": "p"
    },
    {
      "name": "Text inside super",
      "desc": "Ignores text inside super templates, but does parse $ tags",
      "data": {
      },
      "template": "{{<include}} asdfasd {{$foo}}hmm{{/foo}} asdfasdfasdf {{/include}}",
      "partials": {
        "include": "{{$foo}}default content{{/foo}}"
      },
      "expected": "hmm"
    },
    {
      "name": "Text inside super",
      "desc": "Allows text inside a super tag, but ignores it",
      "data": {
      },
      "template": "{{<include}} asdfasd asdfasdfasdf {{/include}}",
      "partials": {
        "include": "{{$foo}}default content{{/foo}}"
      },
      "expected": "default content"
    }
  ]
}
